/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/openimsdk/openim-sdk-cpp */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "export.go"

#include <stdio.h>
typedef void (*CB_S)(char *);
typedef void (*CB_I_S)(int,char *);
typedef void (*CB_S_I_S_S)(char *,int,char *,char *);
typedef void (*CB_S_I_S_S_I)(char *,int,char *,char *,int);
extern void Call_CB_S(CB_S func,char* data);
extern void Call_CB_I_S(CB_I_S func,int event,char* data);
extern void Call_CB_S_I_S_S(CB_S_I_S_S func,char *,int errCode,char* errMsg,char* data);
extern void Call_CB_S_I_S_S_I(CB_S_I_S_S_I func,char *,int errCode,char* errMsg,char* data,int progress);
extern CB_S DebugPrint;


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void set_print(CB_S print);
extern __declspec(dllexport) void set_group_listener(CB_I_S cCallback);
extern __declspec(dllexport) void set_conversation_listener(CB_I_S cCallback);
extern __declspec(dllexport) void set_advanced_msg_listener(CB_I_S cCallback);
extern __declspec(dllexport) void set_batch_msg_listener(CB_I_S cCallback);
extern __declspec(dllexport) void set_user_listener(CB_I_S cCallback);
extern __declspec(dllexport) void set_friend_listener(CB_I_S cCallback);
extern __declspec(dllexport) void set_custom_business_listener(CB_I_S cCallback);
extern __declspec(dllexport) GoUint8 init_sdk(CB_I_S cCallback, char* operationID, char* config);
extern __declspec(dllexport) void un_init_sdk(char* operationID);
extern __declspec(dllexport) void login(CB_S_I_S_S cCallback, char* operationID, char* uid, char* token);
extern __declspec(dllexport) void logout(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) void im_login(CB_S_I_S_S cCallback, char* operationID, char* uid, char* token);
extern __declspec(dllexport) void im_logout(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) void set_app_background_status(CB_S_I_S_S cCallback, char* operationID, int isBackground);
extern __declspec(dllexport) void network_status_changed(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) GoInt get_login_status(char* operationID);
extern __declspec(dllexport) char* get_login_user();
extern __declspec(dllexport) char* create_text_message(char* operationID, char* text);
extern __declspec(dllexport) char* create_advanced_text_message(char* operationID, char* text, char* messageEntityList);
extern __declspec(dllexport) char* create_text_at_message(char* operationID, char* text, char* atUserList, char* atUsersInfo, char* message);
extern __declspec(dllexport) char* create_location_message(char* operationID, char* description, double longitude, double latitude);
extern __declspec(dllexport) char* create_custom_message(char* operationID, char* data, char* extension, char* description);
extern __declspec(dllexport) char* create_quote_message(char* operationID, char* text, char* message);
extern __declspec(dllexport) char* create_advanced_quote_message(char* operationID, char* text, char* message, char* messageEntityList);
extern __declspec(dllexport) char* create_card_message(char* operationID, char* cardInfo);
extern __declspec(dllexport) char* create_video_message_from_full_path(char* operationID, char* videoFullPath, char* videoType, long long int duration, char* snapshotFullPath);
extern __declspec(dllexport) char* create_image_message_from_full_path(char* operationID, char* imageFullPath);
extern __declspec(dllexport) char* create_sound_message_from_full_path(char* operationID, char* soundPath, long long int duration);
extern __declspec(dllexport) char* create_file_message_from_full_path(char* operationID, char* fileFullPath, char* fileName);
extern __declspec(dllexport) char* create_image_message(char* operationID, char* imagePath);
extern __declspec(dllexport) char* create_image_message_by_url(char* operationID, char* sourcePath, char* sourcePicture, char* bigPicture, char* snapshotPicture);
extern __declspec(dllexport) char* create_sound_message_by_url(char* operationID, char* soundBaseInfo);
extern __declspec(dllexport) char* create_sound_message(char* operationID, char* soundPath, long long int duration);
extern __declspec(dllexport) char* create_video_message_by_url(char* operationID, char* videoBaseInfo);
extern __declspec(dllexport) char* create_video_message(char* operationID, char* videoPath, char* videoType, long long int duration, char* snapshotPath);
extern __declspec(dllexport) char* create_file_message_by_url(char* operationID, char* fileBaseInfo);
extern __declspec(dllexport) char* create_file_message(char* operationID, char* filePath, char* fileName);
extern __declspec(dllexport) char* create_merger_message(char* operationID, char* messageList, char* title, char* summaryList);
extern __declspec(dllexport) char* create_face_message(char* operationID, int index, char* data);
extern __declspec(dllexport) char* create_forward_message(char* operationID, char* m);
extern __declspec(dllexport) void get_all_conversation_list(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) void get_conversation_list_split(CB_S_I_S_S cCallback, char* operationID, int offset, int count);
extern __declspec(dllexport) void get_one_conversation(CB_S_I_S_S cCallback, char* operationID, int sessionType, char* sourceID);
extern __declspec(dllexport) void get_multiple_conversation(CB_S_I_S_S cCallback, char* operationID, char* conversationIDList);
extern __declspec(dllexport) void set_conversation(CB_S_I_S_S cCallback, char* operationID, char* conversationID, char* req);
extern __declspec(dllexport) void hide_conversation(CB_S_I_S_S cCallback, char* operationID, char* conversationID);
extern __declspec(dllexport) void set_conversation_draft(CB_S_I_S_S cCallback, char* operationID, char* conversationID, char* draftText);
extern __declspec(dllexport) void get_total_unread_msg_count(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) char* get_at_all_tag(char* operationID);
extern __declspec(dllexport) char* get_conversation_id_by_session_type(char* operationID, char* sourceID, int sessionType);
extern __declspec(dllexport) void send_message(CB_S_I_S_S_I cCallback, char* operationID, char* message, char* recvID, char* groupID, char* offlinePushInfo, int isOnlineOnly);
extern __declspec(dllexport) void send_message_not_oss(CB_S_I_S_S_I cCallback, char* operationID, char* message, char* recvID, char* groupID, char* offlinePushInfo, int isOnlineOnly);
extern __declspec(dllexport) void find_message_list(CB_S_I_S_S cCallback, char* operationID, char* findMessageOptions);
extern __declspec(dllexport) void get_advanced_history_message_list(CB_S_I_S_S cCallback, char* operationID, char* getMessageOptions);
extern __declspec(dllexport) void get_advanced_history_message_list_reverse(CB_S_I_S_S cCallback, char* operationID, char* getMessageOptions);
extern __declspec(dllexport) void revoke_message(CB_S_I_S_S cCallback, char* operationID, char* conversationID, char* clientMsgID);
extern __declspec(dllexport) void typing_status_update(CB_S_I_S_S cCallback, char* operationID, char* recvID, char* msgTip);
extern __declspec(dllexport) void mark_conversation_message_as_read(CB_S_I_S_S cCallback, char* operationID, char* conversationID);
extern __declspec(dllexport) void delete_message_from_local_storage(CB_S_I_S_S cCallback, char* operationID, char* conversationID, char* clientMsgID);
extern __declspec(dllexport) void delete_message(CB_S_I_S_S cCallback, char* operationID, char* conversationID, char* clientMsgID);
extern __declspec(dllexport) void hide_all_conversations(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) void delete_all_msg_from_local_and_svr(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) void delete_all_msg_from_local(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) void clear_conversation_and_delete_all_msg(CB_S_I_S_S cCallback, char* operationID, char* conversationID);
extern __declspec(dllexport) void delete_conversation_and_delete_all_msg(CB_S_I_S_S cCallback, char* operationID, char* conversationID);
extern __declspec(dllexport) void insert_single_message_to_local_storage(CB_S_I_S_S cCallback, char* operationID, char* message, char* recvID, char* sendID);
extern __declspec(dllexport) void insert_group_message_to_local_storage(CB_S_I_S_S cCallback, char* operationID, char* message, char* groupID, char* sendID);
extern __declspec(dllexport) void search_local_messages(CB_S_I_S_S cCallback, char* operationID, char* searchParam);
extern __declspec(dllexport) void set_message_local_ex(CB_S_I_S_S cCallback, char* operationID, char* conversationID, char* clientMsgID, char* localEx);
extern __declspec(dllexport) void change_input_states(CB_S_I_S_S cCallback, char* operationID, char* conversationID, int inputStatus);
extern __declspec(dllexport) void get_input_states(CB_S_I_S_S cCallback, char* operationID, char* conversationID, char* userID);
extern __declspec(dllexport) void get_users_info(CB_S_I_S_S cCallback, char* operationID, char* userIDs);
extern __declspec(dllexport) void set_self_info(CB_S_I_S_S cCallback, char* operationID, char* userInfo);
extern __declspec(dllexport) void get_self_user_info(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) void upload_file(CB_S_I_S_S cCallback, char* operationID, char* req, CB_I_S uploadCallback);

// =====================================================relation===============================================
//
extern __declspec(dllexport) void get_specified_friends_info(CB_S_I_S_S cCallback, char* operationID, char* userIDList, int filterBlack);
extern __declspec(dllexport) void get_friend_list(CB_S_I_S_S cCallback, char* operationID, int filterBlack);
extern __declspec(dllexport) void get_friend_list_page(CB_S_I_S_S cCallback, char* operationID, int offset, int count, int filterBlack);
extern __declspec(dllexport) void search_friends(CB_S_I_S_S cCallback, char* operationID, char* searchParam);
extern __declspec(dllexport) void check_friend(CB_S_I_S_S cCallback, char* operationID, char* userIDList);
extern __declspec(dllexport) void add_friend(CB_S_I_S_S cCallback, char* operationID, char* userIDReqMsg);
extern __declspec(dllexport) void update_friends(CB_S_I_S_S cCallback, char* operationID, char* req);
extern __declspec(dllexport) void delete_friend(CB_S_I_S_S cCallback, char* operationID, char* friendUserID);
extern __declspec(dllexport) void get_friend_application_list_as_recipient(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) void get_friend_application_list_as_applicant(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) void accept_friend_application(CB_S_I_S_S cCallback, char* operationID, char* userIDHandleMsg);
extern __declspec(dllexport) void refuse_friend_application(CB_S_I_S_S cCallback, char* operationID, char* userIDHandleMsg);
extern __declspec(dllexport) void add_black(CB_S_I_S_S cCallback, char* operationID, char* blackUserID, char* ex);
extern __declspec(dllexport) void get_black_list(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) void remove_black(CB_S_I_S_S cCallback, char* operationID, char* removeUserID);

// =====================================================group===============================================
// CreateGroup creates a group
//
extern __declspec(dllexport) void create_group(CB_S_I_S_S cCallback, char* operationID, char* cGroupReqInfo);

// JoinGroup joins a group
//
extern __declspec(dllexport) void join_group(CB_S_I_S_S cCallback, char* operationID, char* cGroupID, char* cReqMsg, int cJoinSource, char* ex);

// QuitGroup quits a group
//
extern __declspec(dllexport) void quit_group(CB_S_I_S_S cCallback, char* operationID, char* cGroupID);

// DismissGroup dismisses a group
//
extern __declspec(dllexport) void dismiss_group(CB_S_I_S_S cCallback, char* operationID, char* cGroupID);

// ChangeGroupMute changes the mute status of a group
//
extern __declspec(dllexport) void change_group_mute(CB_S_I_S_S cCallback, char* operationID, char* cGroupID, int cIsMute);

// ChangeGroupMemberMute changes the mute status of a group member
//
extern __declspec(dllexport) void change_group_member_mute(CB_S_I_S_S cCallback, char* operationID, char* cGroupID, char* cUserID, int cMutedSeconds);

// SetGroupMemberInfo sets the information of a group member
//
extern __declspec(dllexport) void set_group_member_info(CB_S_I_S_S cCallback, char* operationID, char* cGroupMemberInfo);

// GetJoinedGroupList retrieves the list of joined groups
//
extern __declspec(dllexport) void get_joined_group_list(CB_S_I_S_S cCallback, char* operationID);

// GetJoinedGroupListPage retrieves the list of joined groups with pagination
//
extern __declspec(dllexport) void get_joined_group_list_page(CB_S_I_S_S cCallback, char* operationID, int offset, int count);

// GetSpecifiedGroupsInfo retrieves the information of specified groups
//
extern __declspec(dllexport) void get_specified_groups_info(CB_S_I_S_S cCallback, char* operationID, char* cGroupIDList);

// SearchGroups searches for groups
//
extern __declspec(dllexport) void search_groups(CB_S_I_S_S cCallback, char* operationID, char* cSearchParam);

// SetGroupInfo sets the information of a group
//
extern __declspec(dllexport) void set_group_info(CB_S_I_S_S cCallback, char* operationID, char* cGroupInfo);

// GetGroupMemberList retrieves the list of group members
//
extern __declspec(dllexport) void get_group_member_list(CB_S_I_S_S cCallback, char* operationID, char* cGroupID, int cFilter, int cOffset, int cCount);

// GetGroupMemberOwnerAndAdmin retrieves the owner and admin members of a group
//
extern __declspec(dllexport) void get_group_member_owner_and_admin(CB_S_I_S_S cCallback, char* operationID, char* cGroupID);

// GetGroupMemberListByJoinTimeFilter retrieves the list of group members filtered by join time
//
extern __declspec(dllexport) void get_group_member_list_by_join_time_filter(CB_S_I_S_S cCallback, char* operationID, char* cGroupID, int cOffset, int cCount, long long int cJoinTimeBegin, long long int cJoinTimeEnd, char* cFilterUserIDList);

// GetSpecifiedGroupMembersInfo retrieves the information of specified group members
//
extern __declspec(dllexport) void get_specified_group_members_info(CB_S_I_S_S cCallback, char* operationID, char* cGroupID, char* cUserIDList);

// KickGroupMember kicks group members
//
extern __declspec(dllexport) void kick_group_member(CB_S_I_S_S cCallback, char* operationID, char* cGroupID, char* cReason, char* cUserIDList);

// TransferGroupOwner transfers the ownership of a group
//
extern __declspec(dllexport) void transfer_group_owner(CB_S_I_S_S cCallback, char* operationID, char* cGroupID, char* cNewOwnerUserID);

// InviteUserToGroup invites users to a group
//
extern __declspec(dllexport) void invite_user_to_group(CB_S_I_S_S cCallback, char* operationID, char* cGroupID, char* cReason, char* cUserIDList);

// GetGroupApplicationListAsRecipient retrieves the group application list as a recipient
//
extern __declspec(dllexport) void get_group_application_list_as_recipient(CB_S_I_S_S cCallback, char* operationID);

// GetGroupApplicationListAsApplicant retrieves the group application list as an applicant
//
extern __declspec(dllexport) void get_group_application_list_as_applicant(CB_S_I_S_S cCallback, char* operationID);

// AcceptGroupApplication accepts a group application
//
extern __declspec(dllexport) void accept_group_application(CB_S_I_S_S cCallback, char* operationID, char* cGroupID, char* cFromUserID, char* cHandleMsg);

// RefuseGroupApplication refuses a group application
//
extern __declspec(dllexport) void refuse_group_application(CB_S_I_S_S cCallback, char* operationID, char* cGroupID, char* cFromUserID, char* cHandleMsg);

// SearchGroupMembers searches for group members
//
extern __declspec(dllexport) void search_group_members(CB_S_I_S_S cCallback, char* operationID, char* cSearchParam);

// IsJoinGroup checks if the user has joined a group
//
extern __declspec(dllexport) void is_join_group(CB_S_I_S_S cCallback, char* operationID, char* cGroupID);

// GetUsersInGroup retrieves the users in a group
//
extern __declspec(dllexport) void get_users_in_group(CB_S_I_S_S cCallback, char* operationID, char* cGroupID, char* userIDList);
extern __declspec(dllexport) void subscribe_users_status(CB_S_I_S_S cCallback, char* operationID, char* userIDs);
extern __declspec(dllexport) void unsubscribe_users_status(CB_S_I_S_S cCallback, char* operationID, char* userIDs);
extern __declspec(dllexport) void get_subscribe_users_status(CB_S_I_S_S cCallback, char* operationID);
extern __declspec(dllexport) void get_user_status(CB_S_I_S_S cCallback, char* operationID, char* userIDs);
extern __declspec(dllexport) void update_fcm_token(CB_S_I_S_S cCallback, char* operationID, char* fcmToken, long long int expireTime);
extern __declspec(dllexport) void set_app_Badge(CB_S_I_S_S cCallback, char* operationID, int appUnreadCount);
extern __declspec(dllexport) void upload_logs(CB_S_I_S_S cCallback, char* operationID, int line, char* ex, CB_I_S uploadLogProgressCallback);
extern __declspec(dllexport) void logs(CB_S_I_S_S cCallback, char* operationID, int logLevel, char* file, int line, char* msgs, char* err, char* keyAndValue);

#ifdef __cplusplus
}
#endif
